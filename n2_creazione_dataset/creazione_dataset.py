import os
import pandas as pd
import gzip


# Function dataset create a new dataset in which the rows are the subject labelled with the type of tumor and the colums
# are the features.
# Input: label : file provided from 'create_new_manifest' in are present filename and label
#       type : mRNA or miRNA
#       save : 1: to save the final dataset
# Output: dataset
# !!!! The folder that contains the files downloaded from the manifest MUST be in the same folder of the script

def dataset(label, type):
    # Read the file generated by 'create_new_manifest'
    f = open(label, 'r')
    label = {}  # file_name : label
    lb = f.readline()
    while lb:
        l = lb.split(':')
        label[l[0]] = []
        label[l[0]].append(l[1].strip("[\'").strip("\'] \n"))
        lb = f.readline()
    f.close()

    dataset = {}  # inizialiation of dictionary gene_type : values
    tip = []  # ordered label

    if type == 'mRNA':  # mRNA
        final_file_path = os.getcwd()
        yourpath = os.getcwd() + "\mRNA"
        for root, dirs, files in os.walk(yourpath, topdown=False):  # names of the folder for each subject
            pass
        # Searching each file_name in label to maintain to same order for mRNA and miRNA dataset
        for lb in label.items():
            for name in dirs:
                os.chdir(os.path.join(root, name))
                arr = os.listdir()
                for file in arr:
                    if file in lb[0]:  # open the right file_name
                        tip.append(lb[1])
                        a_file = gzip.open(file, "rb")
                        line = a_file.readline()
                        while line:
                            line = str(line)
                            line = line.split('\\')
                            gene = line[0].strip("b'")
                            value = line[1].strip('t')
                            if gene in dataset:
                                dataset[gene].append(value)
                            else:
                                dataset[gene] = []
                                dataset[gene].append(value)

                            line = a_file.readline()
                        a_file.close()
    # Similar process for the miRNA case
    if type == 'miRNA':  # miRNA
        final_file_path = os.getcwd()
        yourpath = os.getcwd() + "\miRNA"
        for root, dirs, files in os.walk(yourpath, topdown=False):
            pass

        for lb in label.items():
            for name in dirs:
                os.chdir(os.path.join(root, name))
                arr = os.listdir()
                for file in arr:
                    if file in lb[0]:
                        tip.append(lb[1])
                        f = open(file, 'r')
                        lines = f.readlines()
                        for line in lines:
                            if line[0] == 'h':
                                mir = line.split('\t')
                                if mir[0] in dataset:
                                    dataset[mir[0]].append(mir[2])
                                else:
                                    dataset[mir[0]] = []
                                    dataset[mir[0]].append(mir[2])
    # Create the 'final' dataset
    tip = pd.DataFrame(tip)
    finale = pd.DataFrame(index=tip, columns=dataset.keys())  # matrix : rows -> tumor type(subject) columns:gene
    dataset = pd.Series(dataset)
    index = dataset.axes[0]

    for ind in index:
        if ind in finale:
            finale[ind] = dataset[ind]

    # Save the final_dataset in .csv
    os.chdir(final_file_path)
    file_name = 'dataset_finale_' + type + '.csv'
    finale.to_csv(file_name, encoding='utf-8')  # Salvataggio matrice finale
    print('\nfine scrittura csv')
    return finale


# label = 'new_label_m.txt'
label = input('> Labels filename: ').lower()
datatype = input('> Dataset type (miRNA/mRNA): ')
data = dataset(label, datatype)
